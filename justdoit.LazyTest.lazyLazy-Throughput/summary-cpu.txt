--- Execution profile ---
Total samples       : 4380

--- 10590000000 ns (24.18%), 1059 samples
  [ 0] justdoit.LazyTest.getLazy
  [ 1] justdoit.LazyTest.lazyLazy
  [ 2] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 5160000000 ns (11.78%), 516 samples
  [ 0] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 1] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 2] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 3] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 4] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 5] java.lang.reflect.Method.invoke
  [ 6] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 7] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 8] java.util.concurrent.FutureTask.run
  [ 9] java.util.concurrent.Executors$RunnableAdapter.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.ThreadPoolExecutor.runWorker
  [12] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [13] java.lang.Thread.run

--- 3760000000 ns (8.58%), 376 samples
  [ 0] org.openjdk.jmh.infra.Blackhole.consumeFull
  [ 1] org.openjdk.jmh.infra.Blackhole.consume
  [ 2] justdoit.LazyTest.lazyLazy
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 3680000000 ns (8.40%), 368 samples
  [ 0] java.lang.ref.Reference.<init>
  [ 1] java.lang.ref.Reference.<init>
  [ 2] java.lang.ref.WeakReference.<init>
  [ 3] org.openjdk.jmh.infra.Blackhole.consumeFull
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 3510000000 ns (8.01%), 351 samples
  [ 0] org.openjdk.jmh.infra.Blackhole.consumeFull
  [ 1] org.openjdk.jmh.infra.Blackhole.consume
  [ 2] justdoit.LazyTest.lazyLazy
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 3230000000 ns (7.37%), 323 samples
  [ 0] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 1] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 2] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 3] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 4] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 5] java.lang.reflect.Method.invoke
  [ 6] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 7] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 8] java.util.concurrent.FutureTask.run
  [ 9] java.util.concurrent.Executors$RunnableAdapter.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.ThreadPoolExecutor.runWorker
  [12] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [13] java.lang.Thread.run

--- 3090000000 ns (7.05%), 309 samples
  [ 0] justdoit.LazyTest.getLazy
  [ 1] justdoit.LazyTest.lazyLazy
  [ 2] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 3080000000 ns (7.03%), 308 samples
  [ 0] org.openjdk.jmh.infra.Blackhole.consumeFull
  [ 1] org.openjdk.jmh.infra.Blackhole.consume
  [ 2] justdoit.LazyTest.lazyLazy
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 2640000000 ns (6.03%), 264 samples
  [ 0] org.openjdk.jmh.infra.Blackhole.consumeFull
  [ 1] org.openjdk.jmh.infra.Blackhole.consume
  [ 2] justdoit.LazyTest.lazyLazy
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 1350000000 ns (3.08%), 135 samples
  [ 0] justdoit.LazyTest.getLazy
  [ 1] justdoit.LazyTest.lazyLazy
  [ 2] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 1350000000 ns (3.08%), 135 samples
  [ 0] org.openjdk.jmh.infra.Blackhole.consumeFull
  [ 1] org.openjdk.jmh.infra.Blackhole.consume
  [ 2] justdoit.LazyTest.lazyLazy
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 1080000000 ns (2.47%), 108 samples
  [ 0] org.openjdk.jmh.infra.Blackhole.consume
  [ 1] justdoit.LazyTest.lazyLazy
  [ 2] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 1010000000 ns (2.31%), 101 samples
  [ 0] kotlin.SynchronizedLazyImpl.getValue
  [ 1] justdoit.LazyTest.getLazy
  [ 2] justdoit.LazyTest.lazyLazy
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 80000000 ns (0.18%), 8 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long)
  [ 3] WatcherThread::sleep() const
  [ 4] WatcherThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] _pthread_start
  [ 8] thread_start

--- 30000000 ns (0.07%), 3 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long)
  [ 3] G1YoungRemSetSamplingThread::sleep_before_next_cycle()
  [ 4] G1YoungRemSetSamplingThread::run_service()
  [ 5] ConcurrentGCThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] _pthread_start
  [ 9] thread_start

--- 20000000 ns (0.05%), 2 samples
  [ 0] kotlin.SynchronizedLazyImpl.getValue
  [ 1] justdoit.LazyTest.getLazy
  [ 2] justdoit.LazyTest.lazyLazy
  [ 3] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] __gettimeofday
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long)
  [ 3] WatcherThread::sleep() const
  [ 4] WatcherThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] _pthread_start
  [ 8] thread_start

--- 20000000 ns (0.05%), 2 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long)
  [ 3] VMThread::loop()
  [ 4] VMThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] _pthread_start
  [ 8] thread_start

--- 10000000 ns (0.02%), 1 sample
  [ 0] StatSamplerTask::task()
  [ 1] WatcherThread::run()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] _pthread_start
  [ 5] thread_start

--- 10000000 ns (0.02%), 1 sample
  [ 0] Interpreter
  [ 1] java.util.concurrent.CountDownLatch.await
  [ 2] org.openjdk.jmh.runner.InfraControlL2.awaitWarmdownReady
  [ 3] org.openjdk.jmh.runner.InfraControl.awaitWarmdownReady
  [ 4] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 5] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 6] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 7] org.openjdk.jmh.runner.BaseRunner.doSingle
  [ 8] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [ 9] org.openjdk.jmh.runner.ForkedRunner.run
  [10] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] org.openjdk.jmh.runner.BenchmarkHandler.newWorkerData
  [ 1] org.openjdk.jmh.runner.BenchmarkHandler.access$200
  [ 2] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 3] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 4] java.util.concurrent.FutureTask.run
  [ 5] java.util.concurrent.Executors$RunnableAdapter.call
  [ 6] java.util.concurrent.FutureTask.run
  [ 7] java.util.concurrent.ThreadPoolExecutor.runWorker
  [ 8] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [ 9] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire
  [ 1] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly
  [ 2] java.util.concurrent.CountDownLatch.await
  [ 3] org.openjdk.jmh.runner.InfraControlL2.awaitWarmupReady
  [ 4] org.openjdk.jmh.runner.InfraControl.awaitWarmupReady
  [ 5] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 6] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 7] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 8] org.openjdk.jmh.runner.BaseRunner.doSingle
  [ 9] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [10] org.openjdk.jmh.runner.ForkedRunner.run
  [11] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared
  [ 1] java.util.concurrent.CountDownLatch.countDown
  [ 2] org.openjdk.jmh.runner.InfraControlL2.announceWarmdownReady
  [ 3] org.openjdk.jmh.runner.InfraControl.announceWarmdownReady
  [ 4] justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] CompressedOops::encode(oopDesc*)
  [ 1] void ModRefBarrierSet::AccessBarrier<804918ull, G1BarrierSet>::oop_store_in_heap<unsigned int>(unsigned int*, oopDesc*)
  [ 2] Unsafe_PutReferenceVolatile(JNIEnv_*, _jobject*, _jobject*, long, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.putReferenceVolatile
  [ 4] jdk.internal.misc.Unsafe.putReferenceOpaque
  [ 5] java.util.concurrent.locks.LockSupport.setBlocker
  [ 6] java.util.concurrent.locks.LockSupport.parkNanos
  [ 7] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos
  [ 8] java.util.concurrent.LinkedBlockingQueue.poll
  [ 9] java.util.concurrent.ExecutorCompletionService.poll
  [10] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [11] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [13] org.openjdk.jmh.runner.BaseRunner.doSingle
  [14] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [15] org.openjdk.jmh.runner.ForkedRunner.run
  [16] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] __gettimeofday
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long)
  [ 3] G1YoungRemSetSamplingThread::sleep_before_next_cycle()
  [ 4] G1YoungRemSetSamplingThread::run_service()
  [ 5] ConcurrentGCThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.02%), 1 sample
  [ 0] G1Analytics::predict_scan_card_num(unsigned long, bool) const
  [ 1] G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long)
  [ 2] G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
  [ 3] G1CollectionSet::iterate(HeapRegionClosure*) const
  [ 4] G1YoungRemSetSamplingThread::sample_young_list_rs_length()
  [ 5] G1YoungRemSetSamplingThread::run_service()
  [ 6] ConcurrentGCThread::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] _pthread_start
  [10] thread_start

--- 10000000 ns (0.02%), 1 sample
  [ 0] G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long)
  [ 1] G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
  [ 2] G1CollectionSet::iterate(HeapRegionClosure*) const
  [ 3] G1YoungRemSetSamplingThread::sample_young_list_rs_length()
  [ 4] G1YoungRemSetSamplingThread::run_service()
  [ 5] ConcurrentGCThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.02%), 1 sample
  [ 0] to_abstime(timespec*, long, bool, bool)
  [ 1] Monitor::wait_without_safepoint_check(long)
  [ 2] WatcherThread::sleep() const
  [ 3] WatcherThread::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] _pthread_start
  [ 7] thread_start

          ns  percent  samples  top
  ----------  -------  -------  ---
 15030000000   34.32%     1503  justdoit.LazyTest.getLazy
 14340000000   32.74%     1434  org.openjdk.jmh.infra.Blackhole.consumeFull
  8390000000   19.16%      839  justdoit.jmh_generated.LazyTest_lazyLazy_jmhTest.lazyLazy_thrpt_jmhStub
  3680000000    8.40%      368  java.lang.ref.Reference.<init>
  1080000000    2.47%      108  org.openjdk.jmh.infra.Blackhole.consume
  1030000000    2.35%      103  kotlin.SynchronizedLazyImpl.getValue
   130000000    0.30%       13  __psynch_cvwait
    30000000    0.07%        3  __gettimeofday
    10000000    0.02%        1  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire
    10000000    0.02%        1  java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared
    10000000    0.02%        1  StatSamplerTask::task()
    10000000    0.02%        1  Interpreter
    10000000    0.02%        1  G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long)
    10000000    0.02%        1  G1Analytics::predict_scan_card_num(unsigned long, bool) const
    10000000    0.02%        1  CompressedOops::encode(oopDesc*)
    10000000    0.02%        1  org.openjdk.jmh.runner.BenchmarkHandler.newWorkerData
    10000000    0.02%        1  to_abstime(timespec*, long, bool, bool)

